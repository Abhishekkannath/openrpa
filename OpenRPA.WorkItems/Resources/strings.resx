<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="activity_addworkitem" xml:space="preserve">
    <value>Add Workitem</value>
  </data>
  <data name="activity_addworkitem_failed_wiq" xml:space="preserve">
    <value>Failed Queue</value>
  </data>
  <data name="activity_addworkitem_failed_wiq_help" xml:space="preserve">
    <value>If failed, add new workitem to this queue</value>
  </data>
  <data name="activity_addworkitem_files" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="activity_addworkitem_files_help" xml:space="preserve">
    <value>Add these files to new Workitem</value>
  </data>
  <data name="activity_addworkitem_name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="activity_addworkitem_name_help" xml:space="preserve">
    <value>Set custom name of Workitem</value>
  </data>
  <data name="activity_addworkitem_nextrun" xml:space="preserve">
    <value>Next Run</value>
  </data>
  <data name="activity_addworkitem_nextrun_help" xml:space="preserve">
    <value>By default Workitems run right away or with the number of seconds delay set in initial delay on the queue. Use this field to only run the Work Item after the given datetime</value>
  </data>
  <data name="activity_addworkitem_payload" xml:space="preserve">
    <value>Payload</value>
  </data>
  <data name="activity_addworkitem_payload_help" xml:space="preserve">
    <value>List of values to add to Workitem payload, these can be read and updated as part of the processing using Update Workitem</value>
  </data>
  <data name="activity_addworkitem_priority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="activity_addworkitem_priority_help" xml:space="preserve">
    <value>Set priority to a non zero number for this item. The lower the number the higher the proirity</value>
  </data>
  <data name="activity_addworkitem_result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="activity_addworkitem_result_help" xml:space="preserve">
    <value>Resulting Work item</value>
  </data>
  <data name="activity_addworkitem_success_wiq" xml:space="preserve">
    <value>Success Queue</value>
  </data>
  <data name="activity_addworkitem_success_wiq_help" xml:space="preserve">
    <value>If successfull, add new workitem to this queue</value>
  </data>
  <data name="activity_addworkitem_tooltip" xml:space="preserve">
    <value>Add new Workitem to Queue</value>
  </data>
  <data name="activity_addworkitem_wiq" xml:space="preserve">
    <value>Queue Name</value>
  </data>
  <data name="activity_addworkitem_wiqid" xml:space="preserve">
    <value>Queue ID</value>
  </data>
  <data name="activity_addworkitem_wiqid_help" xml:space="preserve">
    <value>ID of queue to add Workitem too</value>
  </data>
  <data name="activity_addworkitem_wiq_help" xml:space="preserve">
    <value>Name of queue to add Workitem too</value>
  </data>
  <data name="activity_addworkitem_workitem" xml:space="preserve">
    <value>Workitem</value>
  </data>
  <data name="activity_addworkitem_workitem_help" xml:space="preserve">
    <value>The added Workitem</value>
  </data>
  <data name="activity_bulkaddworkitems" xml:space="preserve">
    <value>Bulk Add Workitems</value>
  </data>
  <data name="activity_bulkaddworkitems_bulksize" xml:space="preserve">
    <value>Bulk Size</value>
  </data>
  <data name="activity_bulkaddworkitems_bulksize_help" xml:space="preserve">
    <value>Add workitems in batches of this size. The bigger the payload and files, the loweer this number should be. Default is 50</value>
  </data>
  <data name="activity_bulkaddworkitems_datatable" xml:space="preserve">
    <value>DataTable</value>
  </data>
  <data name="activity_bulkaddworkitems_datatable_help" xml:space="preserve">
    <value>DataTable containing the data to be used for creating the Workitems.</value>
  </data>
  <data name="activity_bulkaddworkitems_filefields" xml:space="preserve">
    <value>File Columns</value>
  </data>
  <data name="activity_bulkaddworkitems_filefields_help" xml:space="preserve">
    <value>Array of Column names that contains full path and filename to be attached to that workitem</value>
  </data>
  <data name="activity_bulkaddworkitems_helpurl" xml:space="preserve">
    <value>https://github.com/open-rpa/openrpa/wiki/Workitems#bulk-add-workitems</value>
  </data>
  <data name="activity_bulkaddworkitems_nextrun" xml:space="preserve">
    <value>Next Run</value>
  </data>
  <data name="activity_bulkaddworkitems_nextrun_help" xml:space="preserve">
    <value>By default Workitems run right away or with the number of seconds delay set in initial delay on the queue. Use this field to only run the Work Item after the given datetime</value>
  </data>
  <data name="activity_bulkaddworkitems_priority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="activity_bulkaddworkitems_priority_help" xml:space="preserve">
    <value>Set priority to a non zero number for this item. The lower the number the higher the proirity</value>
  </data>
  <data name="activity_bulkaddworkitems_tooltip" xml:space="preserve">
    <value>Add a new Workitem for each row in a DataTable</value>
  </data>
  <data name="activity_bulkaddworkitems_wiq" xml:space="preserve">
    <value>Queue Name</value>
  </data>
  <data name="activity_bulkaddworkitems_wiqid" xml:space="preserve">
    <value>Queue ID</value>
  </data>
  <data name="activity_bulkaddworkitems_wiqid_help" xml:space="preserve">
    <value>ID of queue to add Workitem too</value>
  </data>
  <data name="activity_bulkaddworkitems_wiq_help" xml:space="preserve">
    <value>Name of queue to add Workitem too</value>
  </data>
  <data name="activity_click_to_view" xml:space="preserve">
    <value>Double-click to view</value>
  </data>
  <data name="activity_deleteworkitem" xml:space="preserve">
    <value>Delete Workitem</value>
  </data>
  <data name="activity_deleteworkitem_tooltip" xml:space="preserve">
    <value>Delete specific Workitem and all associated files from queue. Generally this should never be used</value>
  </data>
  <data name="activity_deleteworkitem_workitem" xml:space="preserve">
    <value>Workitem</value>
  </data>
  <data name="activity_deleteworkitem_workitem_help" xml:space="preserve">
    <value>Workitem to be deleted</value>
  </data>
  <data name="activity_displayname" xml:space="preserve">
    <value>Displayname</value>
  </data>
  <data name="activity_displayname_help" xml:space="preserve">
    <value>Displayname inside the workflow designer</value>
  </data>
  <data name="activity_map_variables" xml:space="preserve">
    <value>Map Variables</value>
  </data>
  <data name="activity_popworkitem" xml:space="preserve">
    <value>Pop Workitem</value>
  </data>
  <data name="activity_popworkitem_folder" xml:space="preserve">
    <value>Folder</value>
  </data>
  <data name="activity_popworkitem_folder_help" xml:space="preserve">
    <value>By default workitem files are saved in project folder, set this to override where to save WorkItem files</value>
  </data>
  <data name="activity_popworkitem_helpurl" xml:space="preserve">
    <value>https://github.com/open-rpa/openrpa/wiki/Workitems#pop-workitem</value>
  </data>
  <data name="activity_popworkitem_result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="activity_popworkitem_result_help" xml:space="preserve">
    <value>Result will contain the Workitem checked out to you, returns nothing if no more items</value>
  </data>
  <data name="activity_popworkitem_tooltip" xml:space="preserve">
    <value>Fetch and checkout next Workitem to work on, remember to update state with Update Workitem</value>
  </data>
  <data name="activity_popworkitem_wiq" xml:space="preserve">
    <value>Queue Name</value>
  </data>
  <data name="activity_popworkitem_wiqid" xml:space="preserve">
    <value>Queue ID</value>
  </data>
  <data name="activity_popworkitem_wiqid_help" xml:space="preserve">
    <value>ID of queue to pop an Workitem from</value>
  </data>
  <data name="activity_popworkitem_wiq_help" xml:space="preserve">
    <value>Name of queue to pop an Workitem from</value>
  </data>
  <data name="activity_popworkitem_workitem" xml:space="preserve">
    <value>Workitem</value>
  </data>
  <data name="activity_popworkitem_workitem_help" xml:space="preserve">
    <value>The Workitem checked out to you, returns nothing if no more items</value>
  </data>
  <data name="activity_throwbusinessruleexception" xml:space="preserve">
    <value>Throw Business Rule Exception</value>
  </data>
  <data name="activity_throwbusinessruleexception_helpurl" xml:space="preserve">
    <value>https://github.com/open-rpa/openrpa/wiki/Workitems#throw-business-rule-exception</value>
  </data>
  <data name="activity_throwbusinessruleexception_message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="activity_throwbusinessruleexception_message_help" xml:space="preserve">
    <value>Short describtion of why this workflow failed due to an Business Rule Exception. What data was missing, incomplete or invalid ? We recommend using payload for more detailed information</value>
  </data>
  <data name="activity_throwbusinessruleexception_tooltip" xml:space="preserve">
    <value>Throw a Business Rule Exception. The workflow is failing due to missing, incomplete or invalid data</value>
  </data>
  <data name="activity_updateworkitem" xml:space="preserve">
    <value>Update Workitem</value>
  </data>
  <data name="activity_updateworkitem_exception" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="activity_updateworkitem_exception_help" xml:space="preserve">
    <value>Attach exception to Workitem in case of error</value>
  </data>
  <data name="activity_updateworkitem_files" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="activity_updateworkitem_files_help" xml:space="preserve">
    <value>Add or Update files associated with this Workitem</value>
  </data>
  <data name="activity_updateworkitem_ignoremaxretries" xml:space="preserve">
    <value>Ignore Max Retries</value>
  </data>
  <data name="activity_updateworkitem_ignoremaxretries_help" xml:space="preserve">
    <value>By default a Workitem will fail, once max retries has been reached. Set this to true to resubmit even if max retries have been reached</value>
  </data>
  <data name="activity_updateworkitem_state" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="activity_updateworkitem_state_help" xml:space="preserve">
    <value>Set Workitem's state to this value</value>
  </data>
  <data name="activity_updateworkitem_tooltip" xml:space="preserve">
    <value>Update Workitem set set state, update files and/or update payload</value>
  </data>
  <data name="activity_updateworkitem_workitem" xml:space="preserve">
    <value>Workitem</value>
  </data>
  <data name="activity_updateworkitem_workitem_help" xml:space="preserve">
    <value>Updated Workitem, remember to set state</value>
  </data>
</root>